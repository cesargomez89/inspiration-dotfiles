DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/cesargomez89/inspiration-dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/cesargomez89/inspiration-dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/inspiration-dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/inspiration-dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/inspiration-dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/list
source ./lib/utils
source ./lib/npm
source ./lib/neovim
source ./lib/prezto
source ./lib/download_files
# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

if [[ "$OSTYPE" == "darwin"* ]]; then
    source ./lib/brew

	# Before relying on Homebrew, check that packages can be compiled
	if ! type_exists 'gcc'; then
	    e_error "The XCode Command Line Tools must be installed first."
	    printf "  Download them from: https://developer.apple.com/downloads\n"
	    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
	    exit 1
	fi

	# Check for Homebrew
	if ! type_exists 'brew'; then
	    e_header "Installing Homebrew..."
	    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	# Check for git
	if ! type_exists 'git'; then
	    e_header "Updating Homebrew..."
	    brew update
	    e_header "Installing Git..."
	    brew install git
	fi
elif [[ "$OSTYPE" == "gnu-linux"* ]]; then
    source ./lib/apt
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
    git submodule foreach git pull origin master
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    # Install Homebrew formulae
    install_packages
    # Install Node packages
    run_npm
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

e_header "Installing prezto..."
run_prezto_install

# add tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# Copy `.gitconfig`.
# Any global git commands in `~/.bash_profile.local` will be written to
# `.gitconfig`. This prevents them being committed to the repository.
rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

# Create the necessary symbolic links between the `.dotfiles` and `HOME`
# directory. The `bash_profile` sources other files directly from the
# `.dotfiles` repository.
ln -fs "${DOTFILES_DIRECTORY}/shell/curlrc"       "${HOME}/.curlrc"
ln -fs "${DOTFILES_DIRECTORY}/shell/zpreztorc"    "${HOME}/.zpreztorc"
ln -fs "${DOTFILES_DIRECTORY}/shell/zshrc"        "${HOME}/.zshrc"
ln -fs "${DOTFILES_DIRECTORY}/shell/tmux_conf"    "${HOME}/.tmux.conf"
ln -fs "${DOTFILES_DIRECTORY}/git/gitattributes"  "${HOME}/.gitattributes"
ln -fs "${DOTFILES_DIRECTORY}/git/gitignore"      "${HOME}/.gitignore"

#Neovim
e_header "Installing neovim dotfiles..."
run_neovim_install

git config --global core.excludesfile "${HOME}/.gitignore"

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi

run_list

run_download_and_open_files
